package com.androidloginlib.user;
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//

import android.content.Context;
import android.util.Log;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.Volley;
import com.androidloginlib.model.Authorization;
import com.androidloginlib.model.LoginRequest;
import com.androidloginlib.signin.SignInManager;
import com.androidloginlib.signin.SignInProvider;
import com.androidloginlib.signin.SignInResultsHandler;
import com.androidloginlib.utils.LocalStorage;
import com.androidloginlib.utils.Utils;
import com.androidloginlib.utils.WebRequest;

import java.lang.ref.ReferenceQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * The identity manager keeps track of the current sign-in provider and is responsible
 * for caching credentials.
 */
public class IdentityManager {
    /** Log tag. */
    private static final String LOG_TAG = IdentityManager.class.getSimpleName();
    private static IdentityManager instance;
    /** Executor service for obtaining credentials in a background thread. */
    private final ExecutorService executorService = Executors.newFixedThreadPool(2);
    public static final String AUTHORIZATION = "authorization";
    private SignInManager signInManager;

    /** Results adapter for adapting results that came from logging in with a provider. */
    private SignInResultsAdapter resultsAdapter;
    private LocalStorage localStorage;
    private Authorization authorization;
    private RequestQueue requestQueue;
    private String loginUrl;

    /**
     * Constructor. Initializes the cognito credentials provider.
     * @param appContext the application context.
     */
    private IdentityManager(final Context appContext, String loginUrl) {
        Log.d(LOG_TAG, "IdentityManager init");
        localStorage = new LocalStorage(appContext);
        this.loginUrl = loginUrl;
        authorization = localStorage.get(AUTHORIZATION, Authorization.class);
        signInManager = SignInManager.getInstance(appContext);
        requestQueue = VolleyQ.newRequestQueue(appContext);
    }

    public static boolean of(Context appContext, String loginUrl) {
        if(instance == null) {
            instance = new IdentityManager(appContext, loginUrl);
            return true;
        }
        return false;
    }

    public static IdentityManager getInstance() {
        return instance;
    }

    /**
     * @return the Cognito credentials provider.
     */
    public Authorization getAuthorization() {
        return this.authorization;
    }

    /**
     * The adapter to handle results that come back from Cognito as well as handle the result from
     * any login providers.
     */
    private class SignInResultsAdapter implements SignInResultsHandler {
        final private SignInResultsHandler handler;

        public SignInResultsAdapter(final SignInResultsHandler handler) {
            this.handler = handler;
        }

        /**
         * Login with an identity provider (ie. Facebook, Twitter, etc.).
         * @param provider A sign-in provider.
         */
        public void loginWithProvider(final SignInProvider provider) {
            Log.d(LOG_TAG, "loginWithProvider");
            final LoginRequest authInput = LoginRequest.of(
                    provider.getCognitoLoginKey(),
                    provider.getToken());
            //currentIdentityProvider = provider;

            Log.d(LOG_TAG, "TOKEN="+authInput);
            WebRequest.post(loginUrl, authInput, new Response.Listener<Authorization>() {
                @Override
                public void onResponse(Authorization response) {
                    Log.i(LOG_TAG, "RESPONSE:"+response);
                    IdentityManager.this.authorization = response;
                    localStorage.save(AUTHORIZATION, response);
                    handler.onSuccess(provider);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    Log.e(LOG_TAG, "ERROR", error);
                    // Sign out of parent provider. This clears the currentIdentityProvider.
                    IdentityManager.this.signOut();
                    handler.onError(provider, error);
                }
            }).enqueue(requestQueue);

        }

        public void onSuccess(final SignInProvider provider) {
            Log.d(LOG_TAG,
                String.format("SignInResultsAdapter.onSuccess(): %s provider sign-in succeeded.",
                    provider.getDisplayName()));
            // Update cognito login with the token.
            loginWithProvider(provider);
        }

        public void onCancel(final SignInProvider provider) {
            Log.d(LOG_TAG,
                String.format("SignInResultsAdapter.onCancel(): %s provider sign-in canceled.",
                    provider.getDisplayName()));
            handler.onCancel(provider);
        }

        public void onError(final SignInProvider provider, final Exception ex) {
            Log.e(LOG_TAG,
                String.format("SignInResultsAdapter.onError(): %s provider error. %s",
                    provider.getDisplayName(), ex.getMessage()), ex);
            handler.onError(provider, ex);
        }
    }

    /**
     * Set the results handler that will be used for results when calling loginWithProvider.
     * @param signInResultsHandler the results handler.
     */
    public void setResultsHandler(final SignInResultsHandler signInResultsHandler) {
        if (signInResultsHandler == null) {
            throw new IllegalArgumentException("signInResultsHandler cannot be null.");
        }
        this.resultsAdapter = new SignInResultsAdapter(signInResultsHandler);
    }

    /**
     * Call getResultsAdapter to get the IdentityManager's handler that adapts results before
     * sending them back to the handler set by {@link #setResultsHandler(SignInResultsHandler)}
     * @return the Identity Manager's results adapter.
     */
    public SignInResultsAdapter getResultsAdapter() {
        return resultsAdapter;
    }

    /**
     * @return true if Cognito credentials have been obtained with at least one provider.
     */
    public boolean isUserSignedIn() {
        return getCurrentIdentityProvider() != null
                && getCurrentIdentityProvider().isUserSignedIn()
                && getAuthorization() != null;
    }

    /**
     * Sign out of the currently in use credentials provider and clear Cognito credentials.
     */
    public void signOut() {
        Log.d(LOG_TAG, "Signing out...");

        if (getCurrentIdentityProvider() != null) {
            getCurrentIdentityProvider().signOut();
            localStorage.delete(AUTHORIZATION);
        }
    }


    /**
     * Gets the current provider.
     * @return current provider or null if not signed-in
     */
    public SignInProvider getCurrentIdentityProvider() {
        return signInManager.getPreviouslySignedInProvider();
    }

    /**
     * Reload the user info and image in the background.
     *
     * @param provider sign-in provider
     * @param onReloadComplete Runnable to be executed on the main thread after user info
     *                         and user image is reloaded.
     */
    public void loadUserInfoAndImage(final SignInProvider provider, final Runnable onReloadComplete) {
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                provider.reloadUserInfo();
                Utils.runOnUiThread(onReloadComplete);
            }
        });
    }

    /**
     * Convenient method to get the user name from the current identity provider.
     * @return user name from the current identity provider, or null if not signed in
     */
    public String getUserName() {
        return getCurrentIdentityProvider() == null ? null : getCurrentIdentityProvider().getUserName();
    }
}
