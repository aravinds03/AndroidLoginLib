package com.androidloginlib.signin;
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.content.pm.ApplicationInfo;
import android.util.Log;
import android.view.View;
import com.google.android.gms.auth.api.Auth;

import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.ResultCallback;

import java.io.IOException;

/**
 * Sign in Provider for Google.
 */
public class GoogleSignInProvider implements SignInProvider {
    /** Log tag. */
    private static final String LOG_TAG = GoogleSignInProvider.class.getSimpleName();
    // Google Client ID for Web application

    /** The Cognito login key for Google+ to be used in the Cognito login Map. */
    public static final String COGNITO_LOGIN_KEY_GOOGLE = "accounts.google.com";

    // Arbitrary activity request ID. You can handle this in the main activity,
    // if you want to take action when a google services result is received.
    private static final int REQUEST_GOOGLE_PLAY_SERVICES = 1363;

    /* Request code used to invoke sign in user interactions. */
    private static final int RC_SIGN_IN = 900913;

    /** Client used to interact with Google APIs. */
    private final GoogleApiClient mGoogleApiClient;

    /** Android context. */
    private Context context;

    /** Flag indicating Google is handling an intent to connect (sign-in). */
    private boolean mIntentInProgress = false;

    /** The sign-in results adapter from the SignInManager. */
    private SignInResultsHandler resultsHandler;

    /** The sign-in activity. */
    private Activity signInActivity = null;

    /** The auth token retrieved when signed-in.  It is good for 6-months from the last service
      * call. */
    private volatile String authToken = null;

    /** User's name. */
    private String userName;

    /** User's image Url. */
    private String userImageUrl;

    /**
     * Constuctor. Builds the Google Api Client.
     * @param context context.
     */
    public GoogleSignInProvider(final Context context) {
        this.context = context;

        clearUserInfo();

        Log.d(LOG_TAG, "Initializing Google SDK...");
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestEmail()
                .build();

        // Build GoogleApiClient with access to basic profile
        mGoogleApiClient = new GoogleApiClient.Builder(context)
            .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
            .build();
        mGoogleApiClient.connect();
    }

    /** {@inheritDoc} */
    @Override
    public String getDisplayName() {
        return "Google";
    }

    /** {@inheritDoc} */
    @Override
    public boolean isUserSignedIn() {
        OptionalPendingResult<GoogleSignInResult> opr = Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient);
        if (opr.isDone()) {
            // If the user's cached credentials are valid, the OptionalPendingResult will be "done"
            // and the GoogleSignInResult will be available instantly.
            Log.d(LOG_TAG, "Got cached sign-in");
            GoogleSignInResult result = opr.get();
            handleSignInResult(result);
            return true;
        }
        return false;
    }

    /** {@inheritDoc} */
    @Override
    public String getCognitoLoginKey() {
        return COGNITO_LOGIN_KEY_GOOGLE;
    }

    /** {@inheritDoc} */
    @Override
    public String getToken() {
        return authToken;
    }

    @Override
    public String refreshToken() {
        Log.d(LOG_TAG, "Google provider refreshing token...");
        OptionalPendingResult<GoogleSignInResult> opr = Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient);
        if (opr.isDone()) {
            // If the user's cached credentials are valid, the OptionalPendingResult will be "done"
            // and the GoogleSignInResult will be available instantly.
            Log.d(LOG_TAG, "Got cached sign-in");
            GoogleSignInResult result = opr.get();
            handleSignInResult(result);
        }
        return authToken;
    }

    /**
     * Initiate sign-in with Google.
     */
    private void signIn() {
        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
        signInActivity.startActivityForResult(signInIntent, RC_SIGN_IN);
    }

    /** {@inheritDoc} */
    @Override
    public void signOut() {
        Log.d(LOG_TAG, "Google provider signing out...");

        clearUserInfo();

        authToken = null;
        Auth.GoogleSignInApi.signOut(mGoogleApiClient);
    }

    /** {@inheritDoc} */
    @Override
    public boolean isRequestCodeOurs(final int requestCode) {
        return (requestCode == RC_SIGN_IN);
    }

    /** {@inheritDoc} */
    @Override
    public void handleActivityResult(final int requestCode, final int resultCode, final Intent data) {
        if (requestCode != RC_SIGN_IN) {
            return;
        }
        // if the user canceled
        if (resultCode == 0) {
            resultsHandler.onCancel(GoogleSignInProvider.this);
            clearUserInfo();
            return;
        }
        GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
        GoogleSignInAccount account = result.getSignInAccount();
        authToken = account.getIdToken();
        userImageUrl = account.getPhotoUrl() == null ? null: account.getPhotoUrl().toString();
        userName = account.getDisplayName();
        mIntentInProgress = false;
    }

    /** {@inheritDoc} */
    @Override
    public View.OnClickListener initializeSignInButton(final Activity signInActivity, final View buttonView,
                                       final SignInResultsHandler resultsHandler) {
        this.signInActivity = signInActivity;
        this.resultsHandler = resultsHandler;
        final GoogleApiAvailability api = GoogleApiAvailability.getInstance();
        final int code = api.isGooglePlayServicesAvailable(context.getApplicationContext());

        if (ConnectionResult.SUCCESS != code) {
            if(api.isUserResolvableError(code)) {
                Log.w(LOG_TAG, "Google Play services recoverable error.");
                api.showErrorDialogFragment(signInActivity, code, REQUEST_GOOGLE_PLAY_SERVICES);
            } else {
                final boolean isDebugBuild =
                        (0 != (signInActivity
                                .getApplicationContext()
                                .getApplicationInfo()
                                .flags & ApplicationInfo.FLAG_DEBUGGABLE));

                if (!isDebugBuild) {
                    buttonView.setVisibility(View.GONE);
                } else {
                    Log.w(LOG_TAG, "Google Play Services are not available, but we are showing the Google Sign-in Button, anyway, because this is a debug build.");
                }
            }
            return null;
        }

        final View.OnClickListener listener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                signIn();
            }
        };
        buttonView.setOnClickListener(listener);
        return listener;
    }

    /**
     * Handler method for connection to Google failed.
     * @param result Contains all possible error codes for when a client fails to connect to
     *               Google Play services.
     */
    public void onConnectionFailed(final ConnectionResult result) {
        if (!mIntentInProgress) {
            if (result.hasResolution()) {
                try {
                    mIntentInProgress = true;
                    result.startResolutionForResult(signInActivity, RC_SIGN_IN);
                } catch (IntentSender.SendIntentException ex) {
                    // The intent was canceled before it was sent.  Return to the default
                    // state and attempt to connect to get an updated ConnectionResult.
                    mIntentInProgress = false;
                    mGoogleApiClient.connect();
                }
            } else {
                resultsHandler.onError(GoogleSignInProvider.this,
                    new IllegalStateException(result.toString()));
            }
        } else {
            Log.w(LOG_TAG, "onConnectionFailed while Google sign-in intent is already in progress.");
        }
    }

    private void clearUserInfo() {
        userName = null;
        userImageUrl = null;
    }

    /** {@inheritDoc} */
    @Override
    public String getUserName() {
        return userName;
    }

    /** {@inheritDoc} */
    @Override
    public String getUserImageUrl() {
        return userImageUrl;
    }

    /** {@inheritDoc} */
    public void reloadUserInfo() {
        OptionalPendingResult<GoogleSignInResult> opr = Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient);
        if (opr.isDone()) {
            // If the user's cached credentials are valid, the OptionalPendingResult will be "done"
            // and the GoogleSignInResult will be available instantly.
            Log.d(LOG_TAG, "Got cached sign-in");
            GoogleSignInResult result = opr.get();
            handleSignInResult(result);
        } else {
            // If the user has not previously signed in on this device or the sign-in has expired,
            // this asynchronous branch will attempt to sign in the user silently.  Cross-device
            // single sign-on will occur in this branch.
            opr.setResultCallback(new ResultCallback<GoogleSignInResult>() {
                @Override
                public void onResult(GoogleSignInResult googleSignInResult) {
                    handleSignInResult(googleSignInResult);
                }
            });
        }
    }

    private void handleSignInResult(GoogleSignInResult result) {
        Log.d(LOG_TAG, "handleSignInResult:" + result.isSuccess());
        if (result.isSuccess()) {
            // Signed in successfully, show authenticated UI.
            GoogleSignInAccount acct = result.getSignInAccount();
            authToken = acct.getIdToken();
            userName = acct.getDisplayName();
            userImageUrl = acct.getPhotoUrl() == null ? null : acct.getPhotoUrl().toString();
        } else {
            // Signed out, show unauthenticated UI.

        }
    }
}
